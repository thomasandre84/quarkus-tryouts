# Configuration file
# key = value
quarkus.log.console.json=false
%dev.quarkus.http.cors=true
quarkus.http.cors.methods=*
quarkus.http.cors.headers=*
#
quarkus.datasource.db-kind=h2
quarkus.datasource.username=sa
#quarkus.datasource.reactive.url=jdbc:h2:mem:default
quarkus.datasource.jdbc.url=jdbc:h2:mem:default
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.datasource.jdbc.min-size=1
quarkus.datasource.jdbc.max-size=3


# Metrics
#quarkus.datasource.metrics.enabled=true

#quarkus.hibernate-orm.log.sql=true

# Security
# Tut 1
#quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus
#quarkus.oidc.client-id=backend-service

#Tut 2
#quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus
#quarkus.oidc.client-id=frontend
#quarkus.oidc.application-type=web-app
#quarkus.http.auth.permission.authenticated.paths=/*
#quarkus.http.auth.permission.authenticated.policy=authenticated
# For Logout
#quarkus.oidc.tenant-logout.logout.path=/logout
#quarkus.oidc.tenant-logout.logout.post-logout-path=/postlogout

# Only the authenticated users can initiate a logout:
#quarkus.http.auth.permission.authenticated.paths=/logout
#quarkus.http.auth.permission.authenticated.policy=authenticated

# Logged out users should be returned to the /welcome.html site which will offer an option to re-login:
#quarkus.http.auth.permission.authenticated.paths=/welcome.html
#quarkus.http.auth.permission.authenticated.policy=permit

#Tut 3
# Default Tenant Configuration
#quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus
#quarkus.oidc.client-id=multi-tenant-client
#quarkus.oidc.application-type=web-app

# Tenant A Configuration
#quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/auth/realms/tenant-a
#quarkus.oidc.tenant-a.client-id=multi-tenant-client
#quarkus.oidc.tenant-a.application-type=web-app

# HTTP Security Configuration
#quarkus.http.auth.permission.authenticated.paths=/*
#quarkus.http.auth.permission.authenticated.policy=authenticated

# Tenant configuration using Google OpenID Provider
#quarkus.oidc.tenant-b.auth-server-url=https://accounts.google.com
#quarkus.oidc.tenant-b.application-type=web-app
#quarkus.oidc.tenant-b.client-id={GOOGLE_CLIENT_ID}
#quarkus.oidc.tenant-b.credentials.secret={GOOGLE_CLIENT_SECRET}
#quarkus.oidc.tenant-b.token.issuer=https://accounts.google.com
#quarkus.oidc.tenant-b.authentication.scopes=email,profile,openid