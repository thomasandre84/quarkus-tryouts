mp.messaging.outgoing.test-out.connector=smallrye-kafka
mp.messaging.outgoing.test-out.bootstrap.servers=localhost:9092
mp.messaging.outgoing.test-out.topic=test
#mp.messaging.outgoing.test-out.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
mp.messaging.outgoing.test-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
#mp.messaging.outgoing.test-out.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor

# Configure the Kafka source (we write from it)
mp.messaging.incoming.test-in.connector=smallrye-kafka
mp.messaging.incoming.test-in.bootstrap.servers=localhost:9092
#mp.messaging.incoming.test-in.client.id=consumer-1
mp.messaging.incoming.test-in.group.id=consumer-producer
mp.messaging.incoming.test-in.topic=test
mp.messaging.incoming.test-in.auto.offset.reset=earliest
#mp.messaging.incoming.test-in.key.deserializer=org.apache.kafka.common.serialization.UUIDDeserializer
mp.messaging.incoming.test-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#mp.messaging.incoming.test-in.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor
mp.messaging.incoming.test-in.failure-strategy=dead-letter-queue
# Request Response Example
# Request
mp.messaging.outgoing.request.connector=smallrye-kafka
mp.messaging.outgoing.request.bootstrap.servers=localhost:9092
mp.messaging.outgoing.request.topic=request
mp.messaging.outgoing.request.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.request.tracing-enabled=true
#mp.messaging.outgoing.request.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor

# Consumer
mp.messaging.incoming.request-in.connector=smallrye-kafka
mp.messaging.incoming.request-in.bootstrap.servers=localhost:9092
mp.messaging.incoming.request-in.group.id=consumer-producer
mp.messaging.incoming.request-in.topic=request
#mp.messaging.incoming.request-in.auto.offset.reset=earliest
mp.messaging.incoming.request-in.enable.auto.commit=true
mp.messaging.incoming.request-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.request-in.tracing-enabled=true
#mp.messaging.incoming.request-in.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor
mp.messaging.incoming.request-in.failure-strategy=dead-letter-queue

# Response
mp.messaging.outgoing.response.connector=smallrye-kafka
mp.messaging.outgoing.response.bootstrap.servers=localhost:9092
mp.messaging.outgoing.response.topic=response
mp.messaging.outgoing.response.acks=1
mp.messaging.outgoing.response.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.response.tracing-enabled=false
# Consumer
mp.messaging.incoming.response-in.connector=smallrye-kafka
mp.messaging.incoming.response-in.bootstrap.servers=localhost:9092
mp.messaging.incoming.response-in.group.id=consumer-producer
mp.messaging.incoming.response-in.topic=response
#mp.messaging.incoming.response-in.auto.offset.reset=earliest
#mp.messaging.incoming.response-in.enable.auto.commit=true
mp.messaging.incoming.response-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.response-in.tracing-enabled=false
mp.messaging.incoming.response-in.consumer-rebalance-listener.name=response-incoming
mp.messaging.incoming.response-in.failure-strategy=dead-letter-queue
# Tracing
#quarkus.jaeger.service-name=quarkus
#quarkus.jaeger.sampler-type=const
#quarkus.jaeger.sampler-param=1
quarkus.log.console.format=%d{YYYY-MM-dd HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

%dev.quarkus.log.console.json=false